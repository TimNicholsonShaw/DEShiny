import pandas as pd 
import yaml

sample_names = list(pd.read_csv(config["sample_sheet"])["sample_name"])
print(sample_names)

rule all:
    input:
        "outputs/gene_counts.tsv"

rule idemux:
    input:
        r1=config["demux"]["r1"],
        r2=config["demux"]["r2"],
        sample_sheet=config["sample_sheet"]
    output:
        out_dir=directory("outputs/idemultiplexed/"),
        r1_fastq=expand("outputs/idemultiplexed/{sample}_R1.fastq.gz", sample=sample_names),
        r2_fastq=expand("outputs/idemultiplexed/{sample}_R2.fastq.gz", sample=sample_names)
    shell:
        """
        idemux --r1 {input.r1} --r2 {input.r2} --sample-sheet {input.sample_sheet} --out {output.out_dir}
        """

rule extract_umi:
    input:
        r1= "outputs/idemultiplexed/{sample}_R1.fastq.gz",
        r2= "outputs/idemultiplexed/{sample}_R2.fastq.gz"
    params:
        extract_method="string",
        bc_pattern="X",
        bc_pattern2="NNNNNNNNNN"
    log: "logs/{sample}_extraction_log"
    output:
        r1_extracted="outputs/extracted/{sample}_extracted_R1.fastq.gz"
    shell:
        """
        umi_tools extract --extract-method={params.extract_method} --bc-pattern {params.bc_pattern} \
        --bc-pattern2 {params.bc_pattern2} -L {log} -S {output.r1_extracted} \
        -I {input.r1} --read2-in={input.r2} --read2-out=/dev/null
        """

rule cutadapt:
    input:
        r1_extracted="outputs/extracted/{sample}_extracted_R1.fastq.gz"
    output:
        r1_trimmed="outputs/trimmed/{sample}_extracted_trimmed_R1.fastq.gz"
    threads: 4
    shell:
        """
        cutadapt --quiet -m 20 -O 20 -a "polyA=A{{20}}" -a "QUALITY=G{{20}}" -n {threads} {input.r1_extracted} | \
        cutadapt --quiet -m 20 -O 3 --nextseq-trim=10 -a "r1adapter=AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC;min_overlap=3;max_error_rate=0.100000" - | \
        cutadapt --quiet -m 20 -O 3 -a "r1polyA=A{{18}}" - | \
        cutadapt --quiet -m 20 -O 20 -g "r1adapter=AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC;min_overlap=20" --discard-trimmed -o {output.r1_trimmed} -
        """


rule get_genome_and_annotation:
    input: 
        genome_fasta_location=config["align"]["genome_fasta_location"],
        genome_annotation_location=config["align"]["genome_annotation_location"]
    output:
        genome_fasta="res/genome/genome_fasta.fastq.gz",
        genome_annotation="res/genome/genome_annotation.gtf.gz"
    threads: 1
    shell:
        """
        mkdir res/genome
        wget -O res/genome/genome_fasta.fastq.gz {input.genome_fasta_location}
        wget -O res/genome/genome_annotation.gtf.gz {input.genome_annotation_location}
        """

rule make_star_index:
    input:
        genome_fasta="res/genome/genome_fasta.fastq.gz",
        genome_annotation="res/genome/genome_annotation.gtf.gz"
    output: 
        "res/genome/genome",
        "res/genome/Log.out"
    threads: 10
    params:
        sjdb_overhang=config["align"]["sjdb_overhang"]
    shell:
        """
        STAR --runMode genomeGenerate --runThreadN {threads} \
        --genomeDir res/genome --genomeFastaFiles {input.genome_fasta} \
        --sjdbGTFfile {input.genome_annotation} --sjdbOverhang {params.sjdb_overhang}
        """

rule align:
    input:
        r1_trimmed="outputs/trimmed/{sample}_extracted_trimmed_R1.fastq.gz",
        index_loc="res/genome/genome"
    params:
        prefix="outputs/aligned/{sample}."
    output: "outputs/aligned/{sample}.Aligned.sortedByCoord.out.bam"
    threads: config["align"]["threads"]
    shell:
        """
        STAR --runThreadN {threads} --readFilesCommand zcat --genomeDir {input.index_loc} --readFilesIn {input.r1_trimmed} \
        --outFilterType BySJout --outFilterMultimapNmax 200 --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --outFilterMismatchNmax 999 \
        --outFilterMismatchNoverLmax 0.6 --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --limitOutSJcollapsed 5000000 \
        --limitIObufferSize 500000 500000 --outSAMattributes NH HI NM MD --outSAMtype BAM SortedByCoordinate --outFileNamePrefix {params.prefix} \
        --limitBAMsortRAM 5000000 --genomeLoad LoadAndKeep
        """
rule index:
    input: "outputs/aligned/{sample}.Aligned.sortedByCoord.out.bam"
    output: "outputs/aligned/{sample}.Aligned.sortedByCoord.out.bam.bai"
    shell:
        """
        samtools index {input}
        """

rule dedup:
    input: 
        alignment="outputs/aligned/{sample}.Aligned.sortedByCoord.out.bam",
        index="outputs/aligned/{sample}.Aligned.sortedByCoord.out.bam.bai"
    output: "outputs/dedup/{sample}.dedup.bam"
    shell:
        """
        umi_tools dedup -I {input.alignment} -S {output} --multimapping-detection-method=NH \
        --output-stats=outputs/dedup/deduplicated.txt --log=outputs/dedup/deduplication.log
            """
rule index2:
    input: "outputs/dedup/{sample}.dedup.bam"
    output: "outputs/dedup/{sample}.dedup.bam.bai"
    shell:
        """
        samtools index {input}
        """
rule featureCounts:
    input: 
        alignments=expand("outputs/dedup/{sample}.dedup.bam", sample=sample_names)
    params:
        annotation="res/genome/gencode.v49.basic.annotation.gtf"
    output: "outputs/gene_counts.tsv"
    shell:
        """
        featureCounts -s 1 -T 4 -t exon -g gene_id -a {params.annotation} \
        -o {output} {input.alignments}
        """